@page "/category"
@using Microsoft.AspNetCore.Authorization
@using SwiftCart.Utility
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JS

@attribute [Authorize(Roles = SD.Role_Admin)]

<BsModal OnModalConfirmation="ConfirmDeleteClick" ButtonBootStrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to delete this Category"
></BsModal>


@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-haeder bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="py-2 text-white">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/category/create" class="btn btn-lg btn-secondary" style="width:250px">
                        <i class="bi bi-plus-square-fill"></i> Add new Category</a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Category Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Categories)
                        {
                            <tr>
                                <td>@obj.Name</td>
                                <td>
                                    <a href="@($"/category/update/{obj.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i> Edit </a>
                                    <button class="btn btn-danger" @onclick="()=>HandleDelete(obj.Id)"><i class="bi bi-trash3-fill"></i> Delete </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}


@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    private int DeleteCategoryId { get; set; } = 0;


    // protected override async Task OnInitializedAsync()
    // {
    // IsProcessing = true;
    // await LoadCategories();
    // Thread.Sleep(5000);
    // IsProcessing = false;
    // }


    // *** Better to use this to load data compared to OnInitializedAsync in case of Page/Component Level Interactivity
    // Blazor Server Pre renders the component in the server and then on the client side it renders again, So in global level, we wont see this,
    // BUT when using local interactivity per component,  we might see this being called twice, leading to data being loaded twice. Therefore better to do it in AfterRenderAsync

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // IsProcessing = true;
            // StateHasChanged();

            await LoadCategories();
            IsProcessing = false;
            // Invoked only the first render

            StateHasChanged(); // This will re-render the component after the data is loaded
        }
    }

    private async Task LoadCategories()
    {
        //Load Categories
        Categories = await _categoryRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteClick( bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteCategoryId != 0)
        {
            var result = await _categoryRepository.DeleteAsync(DeleteCategoryId);
            if(result)
                _JS?.ToastrSuccess("Category Deleted Successfully"); 
            else
                _JS?.ToastrError("Category Deletion Failed. Please try again later.");

                await LoadCategories();

        }

        DeleteCategoryId = 0;
        IsProcessing = false;
    }

}
